#include <stdio.h>
#include <stdlib.h>

struct process {
    int pid;
    int burst_time;
    int waiting_time;
    float priority;
};

void swap(struct process* a, struct process* b) {
    struct process temp = *a;
    *a = *b;
    *b = temp;
}

int main() {
    int n, i, j, total_waiting_time = 0;
    float avg_waiting_time;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    struct process p[n];
    printf("Enter the burst time of each process: \n");
    for (i = 0; i < n; i++) {
        printf("Process %d: ", i+1);
        scanf("%d", &p[i].burst_time);
        p[i].pid = i+1;
        p[i].waiting_time = 0;
        p[i].priority = 1 + (float)p[i].waiting_time / (float)p[i].burst_time;
    }
    // Sort processes by burst time
    for (i = 0; i < n-1; i++) {
        for (j = 0; j < n-i-1; j++) {
            if (p[j].burst_time > p[j+1].burst_time) {
                swap(&p[j], &p[j+1]);
            }
        }
    }
    // Execute processes in order of priority
    printf("Gantt Chart: ");
    for (i = 0; i < n; i++) {
        printf("P%d ", p[i].pid);
        if (i != n-1) {
            p[i+1].waiting_time = p[i].burst_time + p[i].waiting_time;
            p[i+1].priority = 1 + (float)p[i+1].waiting_time / (float)p[i+1].burst_time;
        }
        total_waiting_time += p[i].waiting_time;
    }
    avg_waiting_time = (float)total_waiting_time / (float)n;
    printf("\n");
    // Display individual and average waiting times
    printf("Process\tBurst Time\tWaiting Time\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\n", p[i].pid, p[i].burst_time, p[i].waiting_time);
    }
    printf("Average waiting time: %.2f", avg_waiting_time);
    return 0;
}